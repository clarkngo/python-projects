# Source: https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/

# Remove All Adjacent Duplicates In String

# Given a string S of lowercase letters, a duplicate removal consists of
# choosing two adjacent and equal letters, and removing them.
# We repeatedly make duplicate removals on S until we no longer can.
# Return the final string after all such duplicate removals have been made.
# It is guaranteed the answer is unique.

# Example 1:

# Input: "abbaca"
# Output: "ca"
# Explanation:
# For example, in "abbaca" we could remove "bb" since the letters are
# adjacent and equal, and this is the only possible move.  The result
# of this move is that the string is "aaca", of which only "aa" is
# possible, so the final string is "ca".

import unittest # unit test framework
from typing import List

class Solution:
    def removeDuplicates(self, S: str) -> str:
        if len(S) <= 1:
            return S
        word: List = list(S)
        has_no_duplicates: bool = False
        remove_indexes = []
        while has_no_duplicates == False:
            if len(word) <= 1:
                break
            for i in range(1, len(word)):
                has_no_duplicates = True
                if word[i] == word[i-1]:
                    remove_indexes.append(i-1)
                    remove_indexes.append(i)
                    has_no_duplicates = False
            word = [i for j, i in enumerate(word) if j not in remove_indexes]
            indexes = []
        new_str: str = ''.join(word)
        return new_str



a = Solution
class Test(unittest.TestCase):

    def test(self):
        self.assertEqual(a.removeDuplicates(self, "abbaca"), "ca")
    def test2(self):
        self.assertEqual(a.removeDuplicates(self, "bbaca"), "aca")
    def test3(self):
        self.assertEqual(a.removeDuplicates(self, "abbac"), "c")
    def test4(self):
        self.assertEqual(a.removeDuplicates(self, "abbacc"), "")
    def test5(self):
        self.assertEqual(a.removeDuplicates(self, "aca"), "aca")
    def test6(self):
        self.assertEqual(a.removeDuplicates(self, "aababaab"), "ba")
    def test7(self):
        self.assertEqual(a.removeDuplicates(self, "babb"), "ba")

if __name__ == '__main__':
    unittest.main()

# Time Limit Exceeded on this test case:
# ""
# TLE for below code:
# class Solution:
#     def removeDuplicates(self, S: str) -> str:
#         if len(S) <= 1:
#             return S
#         word: List = list(S)
#         has_no_duplicates: bool = False
#         while has_no_duplicates == False:
#             if len(word) <= 1:
#                 break
#             for i in range(1, len(word)):
#                 has_no_duplicates = True
#                 if word[i] == word[i-1]:
#                     word.pop(i)
#                     word.pop(i-1)
#                     has_no_duplicates = False
#                     break
#         new_str: str = ''.join(word)
#         return new_str
