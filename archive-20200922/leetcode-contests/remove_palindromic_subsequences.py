# Remove Palindromic Subsequences
# User Accepted:1369
# User Tried:1967
# Total Accepted:1395
# Total Submissions:3245
# Difficulty:Easy
# Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

# Return the minimum number of steps to make the given string empty.

# A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.

# A string is called palindrome if is one that reads the same backward as well as forward.



# Example 1:

# Input: s = "ababa"
# Output: 1
# Explanation: String is already palindrome
# Example 2:

# Input: s = "abb"
# Output: 2
# Explanation: "abb" -> "bb" -> "".
# Remove palindromic subsequence "a" then "bb".
# Example 3:

# Input: s = "baabb"
# Output: 2
# Explanation: "baabb" -> "b" -> "".
# Remove palindromic subsequence "baab" then "b".
# Example 4:

# Input: s = ""
# Output: 0


# Constraints:

# 0 <= s.length <= 1000
# s only consists of letters 'a' and 'b'

class Solution:
    def removePalindromeSub(self, s: str) -> int:
        if s == "": return 0
        l = 0
        r = len(s)-1
        count = 1
        for i in range(len(s)//2):
            while s[l] != s[r]:
                r -= 1

            l += 1
            r -= 1

        return count

s = Solution()
# ans = s.removePalindromeSub("baabb")
# ans = s.removePalindromeSub("")
ans = s.removePalindromeSub("bbaabaaa")
print(ans)

class Solution:
    def removePalindromeSub(self, s: str) -> int:
        if not s:
            return 0
        if list(s) == list(reversed(s)):
            return 1
        if len(set(s)) == 2:
            return 2
